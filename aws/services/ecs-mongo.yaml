Description: >
    ECS Task definition for MongoDB

Parameters: 

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    VPC:
        Description: The VPC that the ECS cluster is deployed to
        Type: AWS::EC2::VPC::Id

    LoadBalancer:
        Description: The VPC that the ECS cluster is deployed to
        Type: String

    LoadBalancerSecurityGroup:
        Description: Select the Load Balancer Security Group to use for the cluster hosts
        Type: AWS::EC2::SecurityGroup::Id
        
    Cluster:
        Description: Please provide the ECS Cluster ID that this service should run on
        Type: String

    Subnets:
        Description: Choose which subnets this cluster should be deployed to
        Type: List<AWS::EC2::Subnet::Id>

    DesiredCount: 
        Description: How many instances of this task should we run across our cluster?
        Type: Number
        Default: 2

    ServiceRole:
        Description: The Application Load Balancer Service Role
        Type: String

    Path: 
        Description: The path to register with the Application Load Balancer
        Type: String
        Default: /mongo

    DatabaseUsername:
      Type: String
      Description: The database user name

    DatabasePassword:
      Type: String
      Description: The database user password

    MongoContainer:
      Description: Mongo container image
      Type: String

Resources:

    Service: 
        Type: AWS::ECS::Service
        Properties: 
            Cluster: !Ref Cluster
            DesiredCount: !Ref DesiredCount
            LaunchType: EC2
            TaskDefinition: !Ref TaskDefinition
            ServiceName: mongo
            # ServiceRegistries:
            #     - RegistryArn: !GetAtt MongoServiceDiscovery.Arn
            #       ContainerName: mongo
            #       ContainerPort: '27017'
            # NetworkConfiguration:
            #     AwsvpcConfiguration:
            #         Subnets: !Ref Subnets
            #         SecurityGroups:
            #             - !GetAtt ServiceSecurityGroup.GroupId
            LoadBalancers: 
                - ContainerName: "mongo"
                  ContainerPort: 27017
                  TargetGroupArn: !Ref TargetGroup

    ServiceSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: "Inbound mongo traffic"
            SecurityGroupIngress:
                - {ToPort: 27017, FromPort: 27017, IpProtocol: tcp, SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup}
            VpcId: !Ref VPC

    TaskExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                - {Action: "sts:AssumeRole", Effect: Allow, Principal: {Service: ecs-tasks.amazonaws.com}}
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

    TaskDefinition:
        Type: AWS::ECS::TaskDefinition
        Properties:
            Family: !Join ['-', [!Ref 'EnvironmentName', 'mongodb']]
            # NetworkMode: awsvpc
            ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
            ContainerDefinitions:
                - 
                    Name: mongo
                    PortMappings:
                        - 
                            ContainerPort: 27017
                            Protocol: "tcp"
                    MountPoints: 
                        - 
                            SourceVolume: "solodev-mongo"
                            ContainerPath: "/mongo"
                    Essential: true
                    Image: !Ref MongoContainer
                    MemoryReservation: 256
                    Environment:
                        - Name: MONGO_INITDB_ROOT_USERNAME
                          Value: !Ref DatabaseUsername
                        - Name: MONGO_INITDB_ROOT_PASSWORD
                          Value: !Ref DatabasePassword
                    LogConfiguration:
                        LogDriver: awslogs
                        Options:
                            awslogs-group: !Ref AWS::StackName
                            awslogs-region: !Ref AWS::Region
                            awslogs-stream-prefix: solodev-mongo
            Volumes: 
                - 
                    Host: 
                        SourcePath: !Join ['', ['/efs/', !Ref 'EnvironmentName', '/mongo']]
                    Name: "solodev-mongo"

    CloudWatchLogsGroup:
        Type: AWS::Logs::LogGroup
        Properties: 
            LogGroupName: !Ref AWS::StackName
            RetentionInDays: 14 

    TargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            VpcId: !Ref VPC
            Port: 27017
            Protocol: HTTP
            # TargetType: ip
            Name: !Join 
                - '-'
                - - !Ref 'EnvironmentName'
                  - mongo

    Listener:
        Type: 'AWS::ElasticLoadBalancingV2::Listener'
        Properties:
            DefaultActions:
                - Type: forward
                  TargetGroupArn: !Ref TargetGroup
            LoadBalancerArn: !Ref LoadBalancer
            Port: '27017'
            Protocol: HTTP
    
    ListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            ListenerArn: !Ref Listener
            Priority: 1
            Conditions:
                - Field: path-pattern
                  Values: 
                    - !Ref Path
            Actions:
                - TargetGroupArn: !Ref TargetGroup
                  Type: forward

    # MongoServiceDiscovery:
    #     Type: AWS::ServiceDiscovery::Service
    #     Properties:
    #         Name: mongo
    #         DnsConfig:
    #             DnsRecords: [{Type: SRV, TTL: "10"}]
    #             NamespaceId: !Ref ServiceDiscoveryNamespace
    #         HealthCheckCustomConfig:
    #             FailureThreshold: 1